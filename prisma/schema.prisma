generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// otp model 
model OTP {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String   @unique
  otpCode     String
  expiry      DateTime
}

model User {
  id                     String             @id @default(auto()) @map("_id") @db.ObjectId
  fullName               String
  profileImage           String?
  email                  String             @unique
  phoneNumber            String?
  isPhoenVerified        Boolean            @default(false)
  password               String?
  role                   UserRole           @default(USER)
  status                 UserStatus         @default(INACTIVE)
  isOnline               Boolean?           @default(false)
  isDeleted              Boolean            @default(false)
  isAvailable            Boolean?           @default(true)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  riderVehicleInfo       RiderVehicleInfo[]
  locations              UserLocation[]     @relation("UserLocations")
  ridesAsCustomer        Ride[]             @relation("RidesAsCustomer")
  ridesAsRider           Ride[]             @relation("RidesAsRider")
  riderReviewsAsRider    RiderReview[]      @relation("RiderReviewsAsRider")
  riderReviewsAsCustomer RiderReview[]      @relation("RiderReviewsAsCustomer")
  rydleapProfile         RydleapProfile[]

  @@map("Users")
}

model Ride {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  riderId        String?       @db.ObjectId
  pickupLat      Float
  pickupLng      Float
  destinationLat Float
  destinationLng Float
  date           String?
  time           String?
  packageId      String        @db.ObjectId
  status         RideStatus    @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  package        Package       @relation(fields: [packageId], references: [id])
  user           User          @relation("RidesAsCustomer", fields: [userId], references: [id])
  rider          User?         @relation("RidesAsRider", fields: [riderId], references: [id])
  RiderReview    RiderReview[]

  @@map("Rides")
}

model RiderReview {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rideId     String   @db.ObjectId
  riderId    String   @db.ObjectId
  customerId String   @db.ObjectId
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ride       Ride     @relation(fields: [rideId], references: [id])
  rider      User     @relation("RiderReviewsAsRider", fields: [riderId], references: [id])
  customer   User     @relation("RiderReviewsAsCustomer", fields: [customerId], references: [id])

  @@map("RiderReviews")
}

// user location table
model UserLocation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  locationLat Float
  locationLng Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserLocations", fields: [userId], references: [id])

  @@map("usersLocations")
}

// package table
model Package {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  price     String
  minutes   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rides     Ride[]

  @@map("Packages")
}

// rider vehicle info table
model RiderVehicleInfo {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleMake               String
  vehicleModel              String
  vehicleYear               String
  vehicleColor              String
  vehicleLicensePlateNumber String
  vehicleRegistrationImage  Json
  vehicleInsuranceImage     Json
  drivingLicenceImage       Json
  userId                    String   @db.ObjectId
  user                      User     @relation(fields: [userId], references: [id])
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("RiderVehicleInfos")
}

model Offer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  subTitle  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Offers")
}

model RydleapProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId         String  @db.ObjectId
  admin           User     @relation(fields: [adminId], references: [id])
  supportEmail    String
  phoneNumber     String
  address         String
  currency        String
  defaultLanguage String
  fullName        String
  logo            Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("RydleapProfiles")
}

enum UserRole {
  ADMIN
  RIDER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  AVAILABLE
  UNAVAILABLE
  ON_RIDE
}

enum RideStatus {
  PENDING
  ACCEPTED
  DECLINED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PackageName {
  Economy
  PREMIUM
}
