generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model OTP {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String   @unique
  otpCode     String
  expiry      DateTime
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  phoneNumber   String         @unique
  fullName      String
  password      String
  role          UserRole
  status        UserStatus     @default(ACTIVE)
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ride          Ride[]
  userLocations UserLocation[]
  Package       Package[]

  @@map("Users")
}

model UserLocation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  locationLat Float
  locationLng Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@map("usersLocations")
}

model Ride {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  userId         String     @db.ObjectId
  riderId        String?    @db.ObjectId
  originLat      Float
  originLng      Float
  destinationLat Float
  destinationLng Float
  status         RideStatus @default(PENDING)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           User       @relation(fields: [userId], references: [id])

  @@map("Rides")
}

model Package {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  price     String
  minutes   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("Packages")
}

model RiderVehicleInfo {
  id                        String @id @default(auto()) @map("_id") @db.ObjectId
  vehicleMake               String
  vehicleModel              String
  vehicleYear               String
  vehicleColor              String
  vehicleLicensePlateNumber String
  vehicleRegistrationImage  Json
  vehicleInsuranceImage     Json
  userId                    String @db.ObjectId
  // user                     User   @relation(fields: [userId], references: [id])

  @@map("RiderVehicleInfos")
}

enum UserRole {
  ADMIN
  RIDER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum RideStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
